// Java program to find maximum product by breaking
// the Integer

class Main {
	// method return x^a in log(a) time
	static int power(int x, int a)
	{
		int res = 1;
		while (a > 0) {
			if ((a & 1) > 0)
				res = res * x;
			x = x * x;
			a >>= 1;
		}
		return res;
	}

	// Method returns maximum product obtained by
	// breaking N
	static int breakInteger(int N)
	{
		// base case 2 = 1 + 1
		if (N == 2)
			return 1;

		// base case 3 = 2 + 1
		if (N == 3)
			return 2;

		int maxProduct = -1;

		// breaking based on mod with 3
		switch (N % 3) {
		// If divides evenly, then break into all 3
		case 0:
			maxProduct = power(3, N / 3);
			break;

		// If division gives mod as 1, then break as
		// 4 + power of 3 for remaining part
		case 1:
			maxProduct = 2 * 2 * power(3, (N / 3) - 1);
			break;

		// If division gives mod as 2, then break as
		// 2 + power of 3 for remaining part
		case 2:
			maxProduct = 2 * power(3, N / 3);
			break;
		}
		return maxProduct;
	}

	// Driver code to test above methods
	public static void main(String[] args)
	{
		int maxProduct = breakInteger(6);
		System.out.println(maxProduct);
	}
}
// This code is contributed by mits

-----------------------------------------------------
import java.util.*;
public class Main
{
/* The main function that returns the max possible product */
static int maxProd(int n)
{
	
	// n equals to 2 or 3 must be handled explicitly
	if (n == 2 || n == 3) return (n - 1);

	// Keep removing parts of size 3 while n is greater than 4
	int res = 1;
	while (n > 4)
	{
	n -= 3;
	res *= 3; // Keep multiplying 3 to res
	}
	return (n * res); // The last part multiplied by previous parts
}

// Driver code
public static void main(String[] args) {
    int n;
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter the Number:");
    n = sc.nextInt();
	System.out.println("Maximum Product is " + maxProd(n));
}
}



